from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Form
from fastapi.responses import FileResponse
from sqlalchemy.orm import Session
from typing import List, Optional
import os
import uuid
import shutil
from datetime import datetime

from database import get_db
from models.board import Board, BoardFile
from api.auth import get_current_user, get_optional_user
from models.user import User

router = APIRouter(prefix="/api/boards", tags=["boards"])

# ÌååÏùº ÏóÖÎ°úÎìú ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
UPLOAD_DIR = "uploads/boards"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# üÜï Î™®Îì† ÌååÏùº ÌóàÏö© (Ï†úÌïú ÏóÜÏùå)
MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MBÎ°ú Ï¶ùÍ∞Ä

def is_allowed_file(filename: str) -> bool:
    """üÜï Î™®Îì† ÌååÏùº ÌóàÏö© (Ï†úÌïú ÏóÜÏùå)"""
    return True  # Î™®Îì† ÌååÏùº ÌóàÏö©

def get_file_extension(filename: str) -> str:
    """ÌååÏùº ÌôïÏû•Ïûê Ï∂îÏ∂ú"""
    return '.' + filename.rsplit('.', 1)[1].lower() if '.' in filename else ''


@router.get("/", response_model=List[dict])
async def get_boards(
    category: Optional[str] = None,
    search: Optional[str] = None,
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå"""
    query = db.query(Board)
    
    # Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞
    if category and category != "Ï†ÑÏ≤¥":
        query = query.filter(Board.category == category)
    
    # Í≤ÄÏÉâ ÌïÑÌÑ∞
    if search:
        query = query.filter(
            (Board.title.contains(search)) |
            (Board.content.contains(search)) |
            (Board.author.contains(search))
        )
    
    # Ï†ïÎ†¨: ÏÉÅÎã®Í≥†Ï†ï Î®ºÏ†Ä, Í∑∏ Îã§Ïùå ÏµúÏã†Ïàú
    query = query.order_by(Board.is_pinned.desc(), Board.created_at.desc())
    
    boards = query.offset(skip).limit(limit).all()
    
    # ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
    result = []
    for board in boards:
        result.append({
            "id": board.id,
            "title": board.title,
            "content": board.content,
            "category": board.category,
            "author": board.author,
            "is_pinned": board.is_pinned,
            "is_notice": board.is_notice,
            "view_count": board.view_count,
            "created_at": board.created_at.isoformat(),
            "updated_at": board.updated_at.isoformat(),
            "file_count": len(board.files),
            "files": [
                {
                    "id": f.id,
                    "original_filename": f.original_filename,
                    "file_size": f.file_size,
                    "content_type": f.content_type
                } for f in board.files
            ]
        })
    
    return result


@router.get("/{board_id}")
async def get_board(board_id: int, db: Session = Depends(get_db)):
    """Í∞úÎ≥Ñ Í≤åÏãúÍ∏Ä Ï°∞Ìöå"""
    board = db.query(Board).filter(Board.id == board_id).first()
    if not board:
        raise HTTPException(status_code=404, detail="Í≤åÏãúÍ∏ÄÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    
    # Ï°∞ÌöåÏàò Ï¶ùÍ∞Ä
    board.view_count += 1
    db.commit()
    
    return {
        "id": board.id,
        "title": board.title,
        "content": board.content,
        "category": board.category,
        "author": board.author,
        "is_pinned": board.is_pinned,
        "is_notice": board.is_notice,
        "view_count": board.view_count,
        "created_at": board.created_at.isoformat(),
        "updated_at": board.updated_at.isoformat(),
        "files": [
            {
                "id": f.id,
                "original_filename": f.original_filename,
                "file_size": f.file_size,
                "content_type": f.content_type,
                "upload_date": f.upload_date.isoformat()
            } for f in board.files
        ]
    }


@router.post("/")
async def create_board(
    title: str = Form(...),
    content: str = Form(...),
    category: str = Form("ÏùºÎ∞ò"),
    is_pinned: bool = Form(False),
    files: List[UploadFile] = File(default=[]),
    db: Session = Depends(get_db),
    current_user: Optional[User] = Depends(get_optional_user)
):
    """ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ±"""
    
    # ÏûÑÏãú: Mock ÏÇ¨Ïö©Ïûê Ï≤òÎ¶¨ (Ïã§Ï†ú Ïö¥ÏòÅÏóêÏÑúÎäî Ï†úÍ±∞ ÌïÑÏöî)
    if not current_user:
        # Mock ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± (ÏûÑÏãú Ìï¥Í≤∞Ï±Ö)
        mock_user = User(
            id="1",
            user_id="testuser",
            email="test@example.com",
            name="ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê",
            role="user",  # is_admin ÎåÄÏã† role ÏÇ¨Ïö©
            is_active=True
        )
        current_user = mock_user
    
    # Í∂åÌïú Ï≤¥ÌÅ¨ (Í¥ÄÎ¶¨ÏûêÎßå ÏÉÅÎã®Í≥†Ï†ï, Î©îÎâ¥Ïñº, Í≥µÍ≥† ÏûëÏÑ± Í∞ÄÎä•)
    if is_pinned and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="ÏÉÅÎã®Í≥†Ï†ïÏùÄ Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•Ìï©ÎãàÎã§.")
    
    if category in ["Î©îÎâ¥Ïñº", "manual"] and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Î©îÎâ¥ÏñºÏùÄ Í¥ÄÎ¶¨ÏûêÎßå ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.")
    
    if category in ["Í≥µÍ≥†", "notice"] and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Í≥µÍ≥†Îäî Í¥ÄÎ¶¨ÏûêÎßå ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.")
    
    # Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
    board = Board(
        title=title,
        content=content,
        category=category,
        author=current_user.name,
        author_id=current_user.id,
        is_pinned=is_pinned,
        is_notice=(category == "Í≥µÍ≥†")
    )
    
    db.add(board)
    db.flush()  # ID ÏÉùÏÑ±ÏùÑ ÏúÑÌï¥ flush
    
    # ÌååÏùº ÏóÖÎ°úÎìú Ï≤òÎ¶¨
    uploaded_files = []
    for file in files:
        if file.filename:  # ÌååÏùºÏù¥ Ïã§Ï†úÎ°ú ÏóÖÎ°úÎìúÎêú Í≤ΩÏö∞
            # ÌååÏùº Í≤ÄÏ¶ù
            if not is_allowed_file(file.filename):
                raise HTTPException(status_code=400, detail=f"ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§: {file.filename}")
            
            # ÌååÏùº ÌÅ¨Í∏∞ Í≤ÄÏ¶ù
            content = await file.read()
            if len(content) > MAX_FILE_SIZE:
                raise HTTPException(status_code=400, detail=f"ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§: {file.filename}")
            
            # Í≥†Ïú†Ìïú ÌååÏùºÎ™Ö ÏÉùÏÑ±
            file_extension = get_file_extension(file.filename)
            stored_filename = f"{uuid.uuid4()}{file_extension}"
            file_path = os.path.join(UPLOAD_DIR, stored_filename)
            
            # ÌååÏùº Ï†ÄÏû•
            with open(file_path, "wb") as buffer:
                buffer.write(content)
            
            # ÌååÏùº Ï†ïÎ≥¥ DB Ï†ÄÏû•
            board_file = BoardFile(
                board_id=board.id,
                original_filename=file.filename,
                stored_filename=stored_filename,
                file_path=file_path,
                file_size=len(content),
                content_type=file.content_type
            )
            db.add(board_file)
            uploaded_files.append({
                "original_filename": file.filename,
                "file_size": len(content)
            })
    
    db.commit()
    
    return {
        "message": "Í≤åÏãúÍ∏ÄÏù¥ ÏûëÏÑ±ÎêòÏóàÏäµÎãàÎã§.",
        "board_id": board.id,
        "uploaded_files": uploaded_files
    }


@router.put("/{board_id}")
async def update_board(
    board_id: int,
    title: str = Form(...),
    content: str = Form(...),
    category: str = Form("ÏùºÎ∞ò"),
    is_pinned: bool = Form(False),
    files: List[UploadFile] = File(default=[]),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Í≤åÏãúÍ∏Ä ÏàòÏ†ï"""
    board = db.query(Board).filter(Board.id == board_id).first()
    if not board:
        raise HTTPException(status_code=404, detail="Í≤åÏãúÍ∏ÄÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    
    # Í∂åÌïú Ï≤¥ÌÅ¨
    if board.author_id != current_user.id and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="ÏàòÏ†ï Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.")
    
    if is_pinned and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="ÏÉÅÎã®Í≥†Ï†ïÏùÄ Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•Ìï©ÎãàÎã§.")
    
    if category in ["Î©îÎâ¥Ïñº", "manual"] and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Î©îÎâ¥ÏñºÏùÄ Í¥ÄÎ¶¨ÏûêÎßå ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.")
    
    if category in ["Í≥µÍ≥†", "notice"] and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Í≥µÍ≥†Îäî Í¥ÄÎ¶¨ÏûêÎßå ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.")
    
    # Í≤åÏãúÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏
    board.title = title
    board.content = content
    board.category = category
    board.is_pinned = is_pinned
    board.is_notice = (category == "Í≥µÍ≥†")
    board.updated_at = datetime.utcnow()
    
    # ÏÉà ÌååÏùº ÏóÖÎ°úÎìú Ï≤òÎ¶¨ (Í∏∞Ï°¥ ÌååÏùº Ïú†ÏßÄ)
    uploaded_files = []
    for file in files:
        if file.filename:
            if not is_allowed_file(file.filename):
                raise HTTPException(status_code=400, detail=f"ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§: {file.filename}")
            
            content = await file.read()
            if len(content) > MAX_FILE_SIZE:
                raise HTTPException(status_code=400, detail=f"ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§: {file.filename}")
            
            file_extension = get_file_extension(file.filename)
            stored_filename = f"{uuid.uuid4()}{file_extension}"
            file_path = os.path.join(UPLOAD_DIR, stored_filename)
            
            with open(file_path, "wb") as buffer:
                buffer.write(content)
            
            board_file = BoardFile(
                board_id=board.id,
                original_filename=file.filename,
                stored_filename=stored_filename,
                file_path=file_path,
                file_size=len(content),
                content_type=file.content_type
            )
            db.add(board_file)
            uploaded_files.append({
                "original_filename": file.filename,
                "file_size": len(content)
            })
    
    db.commit()
    
    return {
        "message": "Í≤åÏãúÍ∏ÄÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.",
        "uploaded_files": uploaded_files
    }


@router.delete("/{board_id}")
async def delete_board(
    board_id: int,
    db: Session = Depends(get_db),
    current_user: Optional[User] = Depends(get_optional_user)
):
    """Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú"""
    board = db.query(Board).filter(Board.id == board_id).first()
    if not board:
        raise HTTPException(status_code=404, detail="Í≤åÏãúÍ∏ÄÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    
    # ÏûÑÏãú: Mock ÏÇ¨Ïö©Ïûê Ï≤òÎ¶¨ (Ïã§Ï†ú Ïö¥ÏòÅÏóêÏÑúÎäî Ï†úÍ±∞ ÌïÑÏöî)
    if not current_user:
        mock_user = User(
            id="1",
            user_id="testuser",
            email="test@example.com",
            name="ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê",
            role="admin",  # ÏÇ≠Ï†ú Í∂åÌïúÏùÑ ÏúÑÌï¥ ÏûÑÏãúÎ°ú adminÏúºÎ°ú ÏÑ§Ï†ï
            is_active=True
        )
        current_user = mock_user
    
    # Í∂åÌïú Ï≤¥ÌÅ¨
    if board.author_id != current_user.id and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="ÏÇ≠Ï†ú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.")
    
    # Ï≤®Î∂ÄÌååÏùº ÏÇ≠Ï†ú
    for file in board.files:
        try:
            if os.path.exists(file.file_path):
                os.remove(file.file_path)
        except Exception as e:
            print(f"ÌååÏùº ÏÇ≠Ï†ú Ïò§Î•ò: {e}")
    
    # Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú (CASCADEÎ°ú ÌååÏùº Ï†ïÎ≥¥ÎèÑ Ìï®Íªò ÏÇ≠Ï†úÎê®)
    db.delete(board)
    db.commit()
    
    return {"message": "Í≤åÏãúÍ∏ÄÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§."}


@router.get("/files/{file_id}/download")
async def download_file(file_id: int, db: Session = Depends(get_db)):
    """ÌååÏùº Îã§Ïö¥Î°úÎìú"""
    board_file = db.query(BoardFile).filter(BoardFile.id == file_id).first()
    if not board_file:
        raise HTTPException(status_code=404, detail="ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    
    if not os.path.exists(board_file.file_path):
        raise HTTPException(status_code=404, detail="ÌååÏùºÏù¥ ÏÑúÎ≤ÑÏóê Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
    
    return FileResponse(
        path=board_file.file_path,
        filename=board_file.original_filename,
        media_type=board_file.content_type or 'application/octet-stream'
    )


@router.delete("/files/{file_id}")
async def delete_file(
    file_id: int,
    db: Session = Depends(get_db),
    current_user: Optional[User] = Depends(get_optional_user)
):
    """Ï≤®Î∂ÄÌååÏùº ÏÇ≠Ï†ú"""
    board_file = db.query(BoardFile).filter(BoardFile.id == file_id).first()
    if not board_file:
        raise HTTPException(status_code=404, detail="ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    
    # ÏûÑÏãú: Mock ÏÇ¨Ïö©Ïûê Ï≤òÎ¶¨
    if not current_user:
        mock_user = User(
            id="1",
            user_id="testuser",
            email="test@example.com",
            name="ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê",
            role="admin",
            is_active=True
        )
        current_user = mock_user
    
    # Í∂åÌïú Ï≤¥ÌÅ¨
    board = board_file.board
    if board.author_id != current_user.id and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="ÌååÏùº ÏÇ≠Ï†ú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.")
    
    # Ïã§Ï†ú ÌååÏùº ÏÇ≠Ï†ú
    try:
        if os.path.exists(board_file.file_path):
            os.remove(board_file.file_path)
    except Exception as e:
        print(f"ÌååÏùº ÏÇ≠Ï†ú Ïò§Î•ò: {e}")
    
    # DBÏóêÏÑú ÌååÏùº Ï†ïÎ≥¥ ÏÇ≠Ï†ú
    db.delete(board_file)
    db.commit()
    
    return {"message": "ÌååÏùºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§."}
