version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: qclick
      POSTGRES_USER: qclick_user
      POSTGRES_PASSWORD: qclick_password_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qclick_user -d qclick"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (세션 저장 및 캐싱)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # QClick Main API
  main-api:
    build:
      context: ./services/main-api
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://qclick_user:qclick_password_2025@postgres:5432/qclick
      SECRET_KEY: qclick_ultra_secure_secret_key_for_production_2025
      JWT_SECRET: qclick_jwt_production_secret_2025_ultra_secure
      ENV: production
      CORS_ORIGINS: http://localhost:3003,https://qclick.vercel.app
      REDIS_URL: redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/main-api/uploads:/app/uploads
      - ./services/main-api/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QName 서비스
  qname-service:
    build:
      context: ./services/qname-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      ENV: production
      MAIN_API_URL: http://main-api:8001
    depends_on:
      - main-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QText 서비스
  qtext-service:
    build:
      context: ./services/qtext-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      ENV: production
      MAIN_API_URL: http://main-api:8001
    depends_on:
      - main-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (선택사항)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      MAIN_API_URL: http://main-api:8001
      QNAME_SERVICE_URL: http://qname-service:8002
      QTEXT_SERVICE_URL: http://qtext-service:8003
    depends_on:
      - main-api
      - qname-service
      - qtext-service

  # Frontend (개발 환경에서만)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: http://localhost:8000
    depends_on:
      - api-gateway

  # Nginx 로드 밸런서 (프로덕션)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    profiles:
      - production

  # 모니터링 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
